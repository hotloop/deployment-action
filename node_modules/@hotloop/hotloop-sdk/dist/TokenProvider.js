"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GcpTokenProvider = void 0;
var google_auth_library_1 = require("google-auth-library");
/**
 * Decodes a base64 encoded string. The result is encoded as utf-8.
 * @param s The base64 encoded string
 */
var decode = function (s) { return Buffer.from(s, 'base64').toString('utf-8'); };
/**
 * Generates tokens for use with GCP services
 */
var GcpTokenProvider = /** @class */ (function () {
    function GcpTokenProvider(serviceAccountKeyString) {
        var json = !serviceAccountKeyString.trim().startsWith('{') ? decode(serviceAccountKeyString) : serviceAccountKeyString;
        var serviceAccountKey = JSON.parse(json);
        var options = {
            forceRefreshOnFailure: true,
            key: serviceAccountKey.private_key,
            email: serviceAccountKey.client_email
        };
        this.client = new google_auth_library_1.JWT(options);
    }
    /**
     * @inheritDoc
     */
    GcpTokenProvider.prototype.getBearerToken = function (audience) {
        return this.client.fetchIdToken(audience);
    };
    return GcpTokenProvider;
}());
exports.GcpTokenProvider = GcpTokenProvider;
//# sourceMappingURL=TokenProvider.js.map