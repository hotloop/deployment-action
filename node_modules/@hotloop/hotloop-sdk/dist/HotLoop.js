"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HotLoopSdkFactory = exports.HotLoop = void 0;
var axiosRetry = require('axios-retry');
var axios_1 = require("axios");
var Correlation_1 = require("./Correlation");
var Enums_1 = require("./Enums");
/**
 * Creates hydrated HotLoopSdk instances
 */
var HotLoopSdkFactory = /** @class */ (function () {
    function HotLoopSdkFactory() {
    }
    /**
     * Get a hydrated HotLoopSdk instance
     * @param token The HotLoop API token
     * @param opts The SDK options
     */
    HotLoopSdkFactory.getInstance = function (token, opts) {
        var url = 'https://europe-west3-hotloop-289416.cloudfunctions.net/';
        return new HotLoop(url, token, opts);
    };
    return HotLoopSdkFactory;
}());
exports.HotLoopSdkFactory = HotLoopSdkFactory;
/**
 * The HotLoop SDK implementation
 */
var HotLoop = /** @class */ (function () {
    /**
     * @constructor
     * @param url The base URL for the HotLoop API
     * @param token The user's bearer token
     * @param opts The options required to configure the SDK
     */
    function HotLoop(url, token, opts) {
        var config = {
            baseURL: url,
            timeout: opts.timeout || 5000,
            headers: {
                'Accept': 'application/json; charset=utf-8',
                'Authorization': "Bearer " + token,
                'User-Agent': opts.userAgent || 'hotloop-sdk'
            }
        };
        this.axios = axios_1.default.create(config);
        var retryConfig = {
            retries: opts.retries || 3,
            retryDelay: function (retryCount) { return retryCount * (opts.retryDelay || 1000); }
        };
        axiosRetry(this.axios, retryConfig);
    }
    /**
     * @inheritDoc
     */
    HotLoop.prototype.syncDeployment = function (options) {
        return this.axios.post(Enums_1.Endpoint.SYNC_DEPLOYMENT, options)
            .then(Correlation_1.correlationIdFromResponse);
    };
    /**
     * @inheritDoc
     */
    HotLoop.prototype.syncCoverage = function (options) {
        return this.axios.post(Enums_1.Endpoint.SYNC_COVERAGE, options)
            .then(Correlation_1.correlationIdFromResponse);
    };
    return HotLoop;
}());
exports.HotLoop = HotLoop;
//# sourceMappingURL=HotLoop.js.map