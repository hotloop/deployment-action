import { TokenProvider } from './TokenProvider';
import { CorrelationId } from './Correlation';
import { SdkOptions, SyncCoverageOptions, SyncDeploymentOptions } from './Options';
/**
 * The HotLoop SDK allows for easy communication with HotLoop
 */
interface HotLoopSdk {
    /**
     * Sync a deployment with HotLoop
     */
    syncDeployment(options: SyncDeploymentOptions): Promise<CorrelationId>;
    /**
     * Sync test coverage with HotLoop
     */
    syncCoverage(options: SyncCoverageOptions): Promise<CorrelationId>;
}
/**
 * Creates hydrated HotLoopSdk instances
 */
declare class HotLoopSdkFactory {
    /**
     * Get a hydrated HotLoopSdk instance
     * @param key The HotLoop API key
     * @param opts The SDK options
     */
    static getInstance(key: string, opts: SdkOptions): HotLoopSdk;
}
/**
 * The HotLoop SDK implementation
 */
declare class HotLoop implements HotLoopSdk {
    private tokenProvider;
    /**
     * The web client used for making requests
     */
    private readonly axios;
    /**
     * @constructor
     * @param url The base URL for the HotLoop API
     * @param tokenProvider A mechanism for fetching tokens for the request
     * @param opts The options required to configure the SDK
     */
    constructor(url: string, tokenProvider: TokenProvider, opts: SdkOptions);
    /**
     * @inheritDoc
     */
    syncDeployment(options: SyncDeploymentOptions): Promise<CorrelationId>;
    /**
     * @inheritDoc
     */
    syncCoverage(options: SyncCoverageOptions): Promise<CorrelationId>;
}
export { HotLoop, HotLoopSdk, HotLoopSdkFactory };
