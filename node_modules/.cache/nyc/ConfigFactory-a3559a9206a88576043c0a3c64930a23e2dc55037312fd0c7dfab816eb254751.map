{"version":3,"file":"/Users/shaunegan/dev/hotloop.io/deployment-action/src/ConfigFactory.ts","sources":["/Users/shaunegan/dev/hotloop.io/deployment-action/src/ConfigFactory.ts"],"names":[],"mappings":";;;AAWA,IAAM,WAAW,GAAG,UAAC,GAAW,IAAK,OAAA,GAAG,KAAK,IAAI,IAAI,GAAG,KAAK,EAAE,EAA1B,CAA0B,CAAA;AAE/D;IAAA;IAoCA,CAAC;IAnCe,iBAAG,GAAjB,UAAmB,OAAsB,EAAE,aAAsB;QAC/D,IAAM,IAAI,GAAG,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAA;QAC/B,IAAM,GAAG,GAAW,OAAO,CAAC,aAAa,EAAE,IAAI,CAAC,CAAA;QAChD,IAAM,OAAO,GAAW,OAAO,CAAC,SAAS,EAAE,IAAI,CAAC,CAAA;QAChD,IAAM,WAAW,GAAW,OAAO,CAAC,aAAa,EAAE,IAAI,CAAC,CAAA;QACxD,IAAM,OAAO,GAAY,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,KAAK,MAAM,CAAC,CAAC,CAAC,IAAI,CAAA;QAClF,IAAM,YAAY,GAAuB,OAAO,CAAC,YAAY,CAAC,IAAI,OAAO,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAA;QACnG,IAAM,UAAU,GAAW,OAAO,CAAC,UAAU,CAAC,CAAA;QAE9C,IAAM,SAAS,GAAW,YAAY,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,GAAG,IAAI,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,CAAA;QACjH,IAAM,OAAO,GAAW,UAAU,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,CAAA;QAE3G,IAAM,OAAO,GAAmB,aAAa,CAAC,OAAO,CAAA;QAErD,IAAI,WAAW,CAAC,GAAG,CAAC;YAAE,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAA;QACtD,IAAI,CAAC,OAAO,CAAC,UAAU,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,QAAQ;YAAE,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAA;QAClG,IAAI,WAAW,CAAC,OAAO,CAAC,UAAU,CAAC,QAAQ,CAAC;YAAE,MAAM,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAA;QACnF,IAAI,WAAW,CAAC,OAAO,CAAC;YAAE,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAA;QAC5D,IAAI,WAAW,CAAC,WAAW,CAAC;YAAE,MAAM,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAA;QAEpE,OAAO;YACL,GAAG,KAAA;YACH,OAAO,EAAE;gBACP,UAAU,EAAE,OAAO,CAAC,UAAU,CAAC,QAAQ;gBACvC,MAAM,EAAE,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,OAAO,CAAC,YAAY,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC;gBACrF,UAAU,EAAE;oBACV,OAAO,SAAA;oBACP,WAAW,aAAA;oBACX,OAAO,SAAA;oBACP,SAAS,WAAA;oBACT,OAAO,SAAA;iBACR;aACF;SACF,CAAA;IACH,CAAC;IACH,oBAAC;AAAD,CAAC,AApCD,IAoCC;AAEQ,sCAAa","sourcesContent":["import { InputOptions } from '@actions/core'\nimport { Context } from '@actions/github/lib/context'\nimport { WebhookPayload } from '@actions/github/lib/interfaces'\nimport { SyncDeploymentOptions } from '@hotloop/hotloop-sdk'\n\ninterface Config {\n  key: string,\n  options: SyncDeploymentOptions\n}\n\ntype InputFunction = (name: string, options?: InputOptions) => string\nconst nullOrEmpty = (val: String) => val === null || val === ''\n\nclass ConfigFactory {\n  public static get (inputFn: InputFunction, githubContext: Context): Config {\n    const opts = { required: true }\n    const key: string = inputFn('hotloop-key', opts)\n    const service: string = inputFn('service', opts)\n    const environment: string = inputFn('environment', opts)\n    const success: boolean = inputFn('success') ? inputFn('success') === 'true' : true\n    const startedAtEnv: string | undefined = inputFn('started-at') || process.env['HOTLOOP_START_TIME']\n    const endedAtEnv: string = inputFn('ended-at')\n\n    const startedAt: number = startedAtEnv ? new Date(parseInt(startedAtEnv) * 1000).getTime() : new Date().getTime()\n    const endedAt: number = endedAtEnv ? new Date(parseInt(endedAtEnv) * 1000).getTime() : new Date().getTime()\n\n    const context: WebhookPayload = githubContext.payload\n\n    if (nullOrEmpty(key)) throw new Error('Invalid token')\n    if (!context.repository || !context.repository.html_url) throw new Error('invalid github context')\n    if (nullOrEmpty(context.repository.html_url)) throw new Error('Invalid repository')\n    if (nullOrEmpty(service)) throw new Error('Invalid service')\n    if (nullOrEmpty(environment)) throw new Error('Invalid environment')\n\n    return {\n      key,\n      options: {\n        repository: context.repository.html_url,\n        branch: context.pull_request ? context.pull_request.head.ref : context.ref.substr(11),\n        deployment: {\n          service,\n          environment,\n          success,\n          startedAt,\n          endedAt\n        }\n      }\n    }\n  }\n}\n\nexport { ConfigFactory, Config }\n"]}